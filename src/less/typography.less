// Copyright (c) Microsoft Open Technologies, Inc.  All Rights Reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
.fontSizes(desktop) {
    @win_font_size_xx_large: 42pt;
    @win_font_size_x_large: 20pt;
    @win_font_size_large: 11pt;
    @win_font_size_medium: 11pt;
    @win_font_size_small: 11pt;
    @win_font_size_x_small: 11pt;
    @win_font_size_xx_small: 9pt;

    @win_font_weight_xx_large: 200;
    @win_font_weight_x_large: 200;
    @win_font_weight_large: 600;
    @win_font_weight_medium: 400;
    @win_font_weight_small: 300;
    @win_font_weight_x_small: 300;
    @win_font_weight_xx_small: 400;

    @win_font_face_xx_large: "Segoe UI Light";
    @win_font_face_large: "Segoe UI Semibold";
    @win_font_face_medium: "Segoe UI";
    @win_font_face_small: "Segoe UI Semilight";
    @win_font_face_bold: "Segoe UI Bold";

}
.fontSizes(phone) {
    @win_font_weight_xx_large: 300;
    @win_font_weight_x_large: 300;
    @win_font_weight_large: 400;
    @win_font_weight_medium: 500;
    @win_font_weight_small: 600;
    @win_font_weight_x_small: 600;
    @win_font_weight_xx_small: 600;

    @win_font_size_xx_large: 28pt;
    @win_font_size_x_large: 24pt;
    @win_font_size_large: 17pt;
    @win_font_size_medium: 15pt;
    @win_font_size_small: 10pt;
    @win_font_size_x_small: 10pt;
    @win_font_size_xx_small: 10pt;

    @win_font_face_xx_large: "Segoe WP Light";
    @win_font_face_large: "Segoe WP";
    @win_font_face_medium: "Segoe WP";
    @win_font_face_small: "Segoe WP Semilight";
    @win_font_face_bold: "Segoe WP Bold";
}
.fontSizes(@platform);

@win_dark_text_high: rgba(0, 0, 0, 0.87);
@win_dark_text_medium: rgba(0, 0, 0, 0.6);
@win_dark_text_low: rgba(0, 0, 0, 0.3);
@win_light_text_high: ~"rgba(255, 255, 255, 1.0)";
@win_light_text_medium: rgba(255, 255, 255, 0.6);
@win_light_text_low: rgba(255, 255, 255, 0.3);

// Symbol font face
@font-face {
    font-family: "Segoe UI Command";
    src: local("Segoe UI Symbol");
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: "Symbols";
    src: url(../fonts/Symbols.ttf);
}

//
// Font size classes
// Two versions of each size are defined, one is a regular mixin that will be
// output to the final css, and the other is a parametric mixin to allow using
// it in LESS with a custom lineheight value. This is necessary because the parametric
// version will not be output to the css.
//
.win-type-xx-large {
    font-size: @win_font_size_xx_large;
    font-weight: @win_font_weight_xx_large;
    line-height: 1.1429;
    letter-spacing: 0px;
}
.win-type-xx-large(@lineHeight: 1.1429) {
    font-size: @win_font_size_xx_large;
    font-weight: @win_font_weight_xx_large;
    line-height: @lineHeight;
    letter-spacing: 0px;
}

.win-type-x-large {
    font-size: @win_font_size_x_large;
    font-weight: @win_font_weight_x_large;
    line-height: 1.2;
}
.win-type-x-large(@lineHeight: 1.2) {
    font-size: @win_font_size_x_large;
    font-weight: @win_font_weight_x_large;
    line-height: @lineHeight;
}

.win-type-large {
    font-size: @win_font_size_large;
    font-weight: @win_font_weight_large;
    line-height: 1.3636;
}
.win-type-large(@lineHeight: 1.3636) {
    font-size: @win_font_size_large;
    font-weight: @win_font_weight_large;
    line-height: @lineHeight;
}

.win-type-medium {
    font-size: @win_font_size_medium;
    font-weight: @win_font_weight_medium;
    line-height: 1.3636;
}
.win-type-medium(@lineHeight: 1.3636) {
    font-size: @win_font_size_medium;
    font-weight: @win_font_weight_medium;
    line-height: @lineHeight;
}

.win-type-small {
    font-size: @win_font_size_small;
    font-weight: @win_font_weight_small;
    line-height: 1.3636;
}
.win-type-small(@lineHeight: 1.3636) {
    font-size: @win_font_size_small;
    font-weight: @win_font_weight_small;
    line-height: @lineHeight;
}

.win-type-x-small {
    font-size: @win_font_size_x_small;
    font-weight: @win_font_weight_x_small;
    line-height: 1.3636;
}
.win-type-x-small(@lineHeight: 1.3636) {
    font-size: @win_font_size_x_small;
    font-weight: @win_font_weight_x_small;
    line-height: @lineHeight;
}

.win-type-xx-small {
    font-size: @win_font_size_xx_small;
    font-weight: @win_font_weight_xx_small;
    line-height: 1.6667;
}
.win-type-xx-small(@lineHeight: 1.6667) {
    font-size: @win_font_size_xx_small;
    font-weight: @win_font_weight_xx_small;
    line-height: @lineHeight;
}

// These internal win-type mixins are necessary to avoid a problem in the output css
// due to the font fallback solution at the bottom of this file.
// Basically since font fallbacks are defined for the reguar win-type mixins, and those
// mixins were used to add size information to body, input, and other controls, there was
// duplicate output in the css for the -ms-lang pseudo class. By using these internal mixins,
// which are not output into the css, the selectors in styles-intrinsic.less can use them without
// incurring duplicate style information, since no font-fallback data is defined for them.
.win-type-xx-large-internal(@lineHeight: 1.1429) {
    font-size: @win_font_size_xx_large;
    font-weight: @win_font_weight_xx_large;
    line-height: @lineHeight;
    letter-spacing: 0px;
}

.win-type-x-large-internal(@lineHeight: 1.2) {
    font-size: @win_font_size_x_large;
    font-weight: @win_font_weight_x_large;
    line-height: @lineHeight;
}

.win-type-large-internal(@lineHeight: 1.3636) {
    font-size: @win_font_size_large;
    font-weight: @win_font_weight_large;
    line-height: @lineHeight;
}

.win-type-medium-internal(@lineHeight: 1.3636) {
    font-size: @win_font_size_medium;
    font-weight: @win_font_weight_medium;
    line-height: @lineHeight;
}

.win-type-small-internal(@lineHeight: 1.3636) {
    font-size: @win_font_size_small;
    font-weight: @win_font_weight_small;
    line-height: @lineHeight;
}

.win-type-x-small-internal(@lineHeight: 1.3636) {
    font-size: @win_font_size_x_small;
    font-weight: @win_font_weight_x_small;
    line-height: @lineHeight;
}

.win-type-xx-small-internal(@lineHeight: 1.6667) {
    font-size: @win_font_size_xx_small;
    font-weight: @win_font_weight_xx_small;
    line-height: @lineHeight;
}

//
// Explicitly define a Segoe UI font-family so that we can assign Segoe UI
// Semilight to an appropriate font-weight.
//
@font-face {
    font-family: "Segoe";
    font-weight: @win_font_weight_xx_large;
    src: local(@win_font_face_xx_large);
}
@font-face {
    font-family: "Segoe";
    font-weight: @win_font_weight_small;
    src: local(@win_font_face_small);
}
@font-face {
    font-family: "Segoe";
    font-weight: @win_font_weight_medium;
    src: local(@win_font_face_medium);
}
@font-face {
    font-family: "Segoe";
    font-weight: @win_font_weight_large;
    src: local(@win_font_face_large);
}
@font-face {
    font-family: "Segoe";
    font-weight: 700;
    src: local(@win_font_face_bold);
}
@font-face {
    font-family: "Segoe";
    font-style: italic;
    font-weight: @win_font_weight_medium;
    src: local("Segoe UI Italic");
}
@font-face {
    font-family: "Segoe";
    font-style: italic;
    font-weight: 700;
    src: local("Segoe UI Bold Italic");
}

//
// Explicitly define font-families for Microsoft Yahei UI and Microsoft JhengHei UI so that we can fallback requests for,
// Microsoft Yahei UI Semilight and Microsoft JhengHei UI Semilight, to Regular instead of Light fonts.
//
@font-face {
    font-family: "Microsoft Yahei UI";
    font-weight: 200;
    src: local("Microsoft Yahei UI Light");
}
@font-face {
    font-family: "Microsoft Yahei UI";
    font-weight: 300;
    src: local("Microsoft Yahei UI");
}
@font-face {
    font-family: "Microsoft Yahei UI";
    font-weight: 500;
    src: local("Microsoft Yahei UI");
}
@font-face {
    font-family: "Microsoft Yahei UI";
    font-weight: 600;
    src: local("Microsoft Yahei UI Bold");
}

@font-face {
    font-family: "Microsoft JhengHei UI";
    font-weight: 200;
    src: local("Microsoft JhengHei UI Light");
}
@font-face {
    font-family: "Microsoft JhengHei UI";
    font-weight: 300;
    src: local("Microsoft JhengHei UI");
}
@font-face {
    font-family: "Microsoft JhengHei UI";
    font-weight: 500;
    src: local("Microsoft JhengHei UI");
}
@font-face {
    font-family: "Microsoft JhengHei UI";
    font-weight: 600;
    src: local("Microsoft JhengHei UI Bold");
}

//
// Mixin defines for the -ms-lang string per each supported language
// The mixin with the matching string parameter will be used
//
.getLanguageString("Ebrima") {
    @langString: am, ti;
}
.getLanguageString("Nirmala UI") {
    @langString: as, bn, gu, hi, kn, kok, ml, mr, ne, or, pa, sat-Olck, si, srb-Sora, ta, te;
}
.getLanguageString("Gadugi") {
    @langString: chr-CHER-US;
}
.getLanguageString("Meiryo UI") {
    @langString: ja;
}
.getLanguageString("Leelawadee UI") {
    @langString: km, lo, th, bug-Bugi;
}
.getLanguageString("Malgun Gothic") {
    @langString: ko;
}
.getLanguageString("Microsoft YaHei UI") {
    @langString: zh-CN, zh-Hans, zh-SG;
}
.getLanguageString("Microsoft JhengHei UI") {
    @langString: zh-HK, zh-TW, zh-Hant, zh-MO;
}
.getLanguageString("Javanese Text") {
    @langString: jv-Java;
}
.getLanguageString("Segoe UI Symbol") {
    @langString: cop-Copt;
}
.getLanguageString("Segoe") {
    @langString: "";
}
.getLanguageString("Symbols") {
    @langString: "";
}

// RTL language strings
@rtl: ar, dv, fa, he, ku-Arab, pa-Arab, prs, ps, sd-Arab, syr, ug, ur, qps-plocm;

// List of language fonts to iterate over
// Each of these fonts will be the first font in the font-family list for the relevant language
@fonts: "Segoe", "Ebrima", "Nirmala UI", "Gadugi", "Meiryo UI", "Leelawadee UI", "Malgun Gothic", "Javanese Text", "Segoe UI Symbol", "Symbols", "Microsoft YaHei UI", "Microsoft JhengHei UI";

// Static list of fallback fonts to be placed after the primary language font
@fontFallbacks: "Segoe", "Ebrima", "Nirmala UI", "Gadugi", "Segoe UI Emoji", "Segoe UI Symbol", "Symbols", "Meiryo UI", "Leelawadee UI", "Microsoft YaHei UI", "Microsoft JhengHei UI", "Malgun Gothic", "Estrangelo Edessa", "Microsoft Himalaya", "Microsoft New Tai Lue", "Microsoft PhagsPa", "Microsoft Tai Le", "Microsoft Yi Baiti", "Mongolian Baiti", "MV Boli", "Myanmar Text", "Javanese Text", "Cambria Math";

// This mixin is a special case for Segoe where no -ms-lang pseudo class is needed
.fontFallBack(@index) when (@index = 1) {
    font-family: extract(@fonts, @index), @fontFallbacks;
}

// This mixin is used for every other language font, and appends the appropriate -ms-lang pseudo class
// to each selector
.fontFallBack(@index) when (@index > 1) {
    .getLanguageString(extract(@fonts, @index));
    &:-ms-lang(@{langString}) {
        font-family: extract(@fonts, @index), @fontFallbacks;
    }
}

// Recursive loop over each font in the @fonts list
.buildFontFallbacks(@index) when (@index <= length(@fonts)) {

    // Apply the font fallback mixin to each of these elements,
    // for this index
    body,
    .win-type-xx-large,
    .win-type-x-large,
    .win-type-large,
    .win-type-medium,
    .win-type-small,
    .win-type-x-small,
    .win-type-xx-small,
    input,
    textarea,
    .win-textarea,
    button,
    select,
    option {
        .fontFallBack(@index);
    }

    // Run the next iteration
    .buildFontFallbacks(@index + 1);
}

// Begin the loop at index 1, the first index in LESS
.buildFontFallbacks(1);
